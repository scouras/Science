#!/usr/bin/perl

package Lyse::FLEX;

use strict;
use warnings;
use Utility qw(:all);
use Data::Dumper;
use Ilmm;

# Not actually exporting anything
require Exporter;
our @ISA = qw(Exporter);
our %EXPORT_TAGS = ('all' => [qw()]);
our @EXPORT_OK = (@{$EXPORT_TAGS{'all'}});
our @EXPORT = qw();

# CVS VERSION INFORMATION (AUTOMAGICALLY GENERATED BY CVS)
'$Revision: 1.5 $'              =~ /^.Revision: (.*) \$/; our $REVISION   = $1;
'$Date: 2009/01/09 00:00:34 $'  =~ /^.Date: (.*) \$/;     our $CHECKED_IN = $1;
'$Author: scouras $'            =~ /^.Author: (.*) \$/;   our $AUTHOR     = $1;


############################################## DEFAULT CONFIGURATION

our %CONFIG_ANAL = (

  revision        => $REVISION,
  checked_in      => $CHECKED_IN,
  author          => $AUTHOR,

  subtype         => '',
  selection       => '@CA',
  resolution      =>  10,
  
  dir_anal        => 'flex',
  file_data       => 'flex.dat',
  file_vmd        => 'arrows.vmd',
  overwrite_anal  => 0,
  overwrite_plots => 0,
  #library         => '/users/nben/code/flex/opteron/flex.so',
  library         => '/users/scouras/code/flex/xeon/flex.so',
  #library         => '/users/scouras/code/flex/opteron/flex.so',
  #queue           => 'opterons',
  #queue_force     => 'opterons',
  queue           => 'xs',
  queue_force     => 'xs',
  #queue           => 'analysis',
  #queue_force     => 'analysis',


  is_plotted      => 1, 
  wait_to_finish  => 1,
  post_process    => "perl /users/scouras/code/flex/util/flex_process",

);




######################################################### INITIALIZE

sub New {
  return bless {
    name => 'FLEX',
    %CONFIG_ANAL,
  };
}

sub Initialize {
  my $CONFIG_ANAL = $_[0];
  
  my %CONFIG_GLOBAL = $_[1] ? %{$_[1]} : ();
  my $ANAL = { 
    %$CONFIG_ANAL, 
    %CONFIG_GLOBAL,
  };

  $ANAL->{'title'} = $CONFIG_ANAL->{'name'};
  if ( $ANAL->{'subtype'} ) { 
    $ANAL->{'title'} .= " $ANAL->{'subtype'}";
  }

  $ANAL->{'queue'} = $ANAL->{'queue_force'};
  return bless $ANAL;
}




########################################################### GET JOBS

sub Get_Jobs {

  my $ANAL    = $_[0];
  my $ILMM    = $_[1];
  my $REGION  = $_[2];

  my $select;
  if ( $REGION->{'system'} ) { 
    $select = $ANAL->{'selection'} 
  } elsif ( $REGION->{'molecule'} ) { 
    $select = "$REGION->{'index'}:$ANAL->{'selection'}" 
  } elsif ( $REGION->{'selection_rmsd'} ) { 
    $select = $REGION->{'selection_rmsd'} 
  } else {
    $select = "$REGION->{'selection'}$ANAL->{'selection'}" 
  }
  
  # SET UP JOB
  my $job = Lyse::Job::new ( $ANAL, $ILMM, $REGION, $ANAL->{'title'}, 1 );
  $job->{'resolution' } = $ANAL->{'resolution'};
  $job->{'library'    } = [$ANAL->{'library'}];
  $job->{'line'       } = ["rmsd $select min.pdb nooutput", 
                           "flex format=text no_align exclude=\@H*"];
  $job->Add_Data($ANAL->{'file_data'}, 'data');
  $job->Add_Data($ANAL->{'file_vmd' }, 'vmd' );
  $job->Validate_Initial();



  if ( wantarray ) { return ($job) }
  else             { return [$job] }
}



###################################################### VALIDATE JOBS
sub Validate_Job {

  my $ANAL = $_[0];
  my $job  = $_[1];

  # Verify that dir and data files exist
  if ( $ANAL->{'overwrite_anal'}  ) { return (0, "forced overwrite" ) }
  my ($valid, $message);
  ($valid, $message) = 
    Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data_data'});
  return ($valid, $message) if not $valid;
  $job->{'status'}{'existing'} = 1;

  # Verify contains all atoms?
  # Verify is newer than mdX.mdc?

  my $mdc = $job->{'ilmm'}{'data_files'}[-1];
  if ( not -e "$job->{'dir'}/$mdc" ) { 
    return (0, "missing data file?");
  }

  my $leniency_time = $ANAL->{'leniency_time'}; # one day of leniency
  my $mdc_time = -M "$job->{'dir'}/$mdc";
  my $flex_time = -M "$job->{'path_data_data'}";
  if ( $flex_time - $mdc_time > $leniency_time ) { 
    return (0, "data > $leniency_time days older than mdcs");
  }

  $job->{'status'}{'valid'} = 1;
  return 1;
}


###################################################### VALIDATE PLOT

sub Validate_Plot { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $path_data = $job->{'path_data_data'};
  my $path_vmd  = $job->{'path_data_vmd'};
  if ( not -e $path_vmd             ) { return ( 0, "missing plot"            ) }
  if ( -z $path_vmd                 ) { return ( 0, "plot is empty "          ) }
  if ( $ANAL->{'overwrite_plots'}   ) { return ( 0, "forced overwrite"        ) }
  if ( -M $path_vmd > -M $path_data ) { return ( 0, "plot is older than data" ) }

  return 1;
}


########################################################### PLOT JOB

sub Plot_Job { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  return 0 if not defined $job->{'path_anal'};
  return 0 if not -e $job->{'path_anal'};

  my $plot_command = "$ANAL->{'post_process'} $job->{'path_anal'}";

  my $result = system ( $plot_command );
  if ( $result ) { 
    $job->{'status'}{'error'} = "plot_flex failed";
    return (0, "plot_flex failed '$result'");
  } else {
    $job->{'status'}{'plotted'} = 1;
    return 1;
  }

}





1

