#!/usr/bin/perl

package Lyse::SASA;

use strict;
use warnings;
use Utility qw(:all);
use Data::Dumper;
use Ilmm;

# Not actually exporting anything
require Exporter;
our @ISA = qw(Exporter);
our %EXPORT_TAGS = ('all' => [qw()]);
our @EXPORT_OK = (@{$EXPORT_TAGS{'all'}});
our @EXPORT = qw();

# CVS VERSION INFORMATION (AUTOMAGICALLY GENERATED BY CVS)
'$Revision: 1.3 $'          =~ /^.Revision: (.*) \$/; our $REVISION   = $1;
'$Date: 2009/01/09 00:05:11 $'  =~ /^.Date: (.*) \$/;     our $CHECKED_IN = $1;
'$Author: scouras $'            =~ /^.Author: (.*) \$/;   our $AUTHOR     = $1;


############################################## DEFAULT CONFIGURATION

our %CONFIG_ANAL = (

  revision        => $REVISION,
  checked_in      => $CHECKED_IN,
  author          => $AUTHOR,

  subtype         => '',
  resolution      => 10,
  
  dir_anal        => 'sasa',
  file_data       => 'sasa_t.dat',
  file_vdw        => '/net/programs/ilmm/lib/sasa/vdw.radii',
  overwrite_anal  => 0,
  overwrite_plots => 0,
  start_emphasis  => 20,
  final_emphasis  => 20,
  width           => 1024,
  height          => 768,
  
  is_plotted      => 1,
  wait_to_finish  => 1,
  queue           => 'opterons',
  #queue           => 'analysis',
  plot_matrix      => "/users/scouras/code/scouras/plot_sasa_matrix",
  #plot_dif        => "/users/scouras/code/scouras/plot_sasa_details_difference",
  #plot_abs        => "/users/scouras/code/scouras/plot_sasa_details_absolute",
  plot_resolution => 100,

);




######################################################### INITIALIZE

sub New {
  return bless {
    name => 'SASA',
    %CONFIG_ANAL,
  };
}

sub Initialize {
  my $CONFIG_ANAL = $_[0];
  
  my %CONFIG_GLOBAL = $_[1] ? %{$_[1]} : ();
  my $ANAL = { 
    %$CONFIG_ANAL, 
    %CONFIG_GLOBAL,
  };

  $ANAL->{'title'    } = $CONFIG_ANAL->{'name'};
  $ANAL->{'title_abs'} = $CONFIG_ANAL->{'name'} . " Abs";
  $ANAL->{'title_dif'} = $CONFIG_ANAL->{'name'} . " Dif";

  if ( $ANAL->{'subtype'} ) { 
    $ANAL->{'title'    } .= " $ANAL->{'subtype'}";
    $ANAL->{'title_abs'} .= " $ANAL->{'subtype'}";
    $ANAL->{'title_dif'} .= " $ANAL->{'subtype'}";
  }

  return bless $ANAL;
}




########################################################### GET JOBS

sub Get_Jobs {

  my $ANAL    = $_[0];
  my $ILMM    = $_[1];
  my $REGION  = $_[2];

  # SASA only executes on whole molecules
  if ( not defined $REGION->{'molecule'} ) { return }
  if ( not defined $REGION->{'index'   } ) { return }
  if ( $REGION->{'period'}               ) { return }

  # SET UP JOB
  my $job = Lyse::Job::new ( $ANAL, $ILMM, $REGION, $ANAL->{'title'} );
  $job->{'resolution' } = $ANAL->{'resolution'};
  $job->{'line'       } = "sasa $ANAL->{'file_vdw'}";
  $job->{'dir_anal'  } = "$job->{'dir_anal'}/$REGION->{'index'}_$REGION->{'name'}";
  $job->{'path_anal' } = "$ILMM->{'dir'}/$job->{'dir_anal'}";
  $job->Add_Data ($ANAL->{'file_data'});
  $job->Add_Image("$ANAL->{'title_dif'} Total - $REGION->{'title_full'}", $ANAL->{'file_data'}, 'dif_total');
  $job->Add_Image("$ANAL->{'title_dif'} SC - $REGION->{'title_full'}",    $ANAL->{'file_data'}, 'dif_sc');
  $job->Add_Image("$ANAL->{'title_dif'} MC - $REGION->{'title_full'}",    $ANAL->{'file_data'}, 'dif_mc');
  $job->Add_Image("$ANAL->{'title_abs'} Total - $REGION->{'title_full'}", $ANAL->{'file_data'}, 'abs_total'  );
  $job->Add_Image("$ANAL->{'title_abs'} SC - $REGION->{'title_full'}",    $ANAL->{'file_data'}, 'abs_sc'  );
  $job->Add_Image("$ANAL->{'title_abs'} MC - $REGION->{'title_full'}",    $ANAL->{'file_data'}, 'abs_mc'  );
  $job->Validate_Initial();

  if ( wantarray ) { return ($job) }
  else             { return [$job] }
}



###################################################### VALIDATE JOBS
sub Validate_Job {

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $dir = $job->{'path_anal'};
  my $ILMM = $job->{'ilmm'};

  # Verify that dir and data files exist
  if ( $ANAL->{'overwrite_anal'}  ) { return (0, "forced overwrite" ) }
  my ($valid, $message);
  ($valid, $message) = 
    Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data'});
  return ($valid, $message) if not $valid;
  $job->{'status'}{'existing'} = 1;

  ($valid, $message) = 
    Lyse::Job::Basic_Data_Time_Check( $job->{'path_data'}, 
                                $ILMM->{'start_time'},
                                $ILMM->{'finish_time'},
                                $ANAL->{'resolution'},
                                $ANAL->{'leniency'},
                                $ANAL->{'rewind'},
                                 );
  return ($valid, $message) if not $valid;

  $job->{'status'}{'valid'} = 1;
  return 1;
}


###################################################### VALIDATE PLOT

sub Validate_Plot { 

  #print "VALIDATING SASA PLOT\n";

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $path_data = $job->{'path_data'};
  my @images = ( 
        $job->{'path_image_abs_total'},
        $job->{'path_image_abs_sc'},
        $job->{'path_image_abs_mc'},
        $job->{'path_image_dif_total'},
        $job->{'path_image_dif_sc'},
        $job->{'path_image_dif_mc'},
  );

  my ( $valid, $reason );

  foreach my $image ( @images ) { 
    ( $valid, $reason ) = Lyse::Job::Basic_Image_Check ( $image, $path_data );
    return ( $valid, $reason ) if ( not $valid );
  }

  $job->{'images'} = [@images];
  return 1;

}


########################################################### PLOT JOB

sub Plot_Job { 
  
  #print "PLOTTING SASA PLOT\n";

  my $ANAL = $_[0];
  my $job  = $_[1];

  foreach my $type ( qw(abs dif) ) { 
    foreach my $area ( qw(total sc mc ) ) { 
      my $title = $job->{"title_image_$type\_$area"};


      my $plot_command = 
        "$ANAL->{'plot_matrix'} "
          . "$job->{'path_anal'} "
          . "res=$job->{'region'}{'start_residue'} "
          . "ps=$ANAL->{'plot_resolution'} "
          . "title=\"$title\" "
          . "target='$area' "
          . "format='$type' "
          . "&> $job->{'path_anal'}/$job->{'region'}{'file_name'}.$type.$area.log"
          ;

      #print "$plot_command\n";
      my $result = system ( $plot_command );
      if ( $result ) { 
        $job->{'status'}{'error'} = "plot_sasa_$type\_$area failed";
        return (0, $job->{'status'}{'error'});
      }
    }
  }

  my ( $status, $message ) = $ANAL->Validate_Plot($job);
  if ( $status ) { $job->{'status'}{'plotted'} = 1; }
  return $status, $message;

}



1

