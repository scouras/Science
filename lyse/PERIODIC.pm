#!/usr/bin/perl

package Lyse::PERIODIC;

use strict;
use warnings;
use Utility qw(:all);
use Data::Dumper;
use Ilmm;

# Not actually exporting anything
require Exporter;
our @ISA = qw(Exporter);
our %EXPORT_TAGS = ('all' => [qw()]);
our @EXPORT_OK = (@{$EXPORT_TAGS{'all'}});
our @EXPORT = qw();

# CVS VERSION INFORMATION (AUTOMAGICALLY GENERATED BY CVS)
'$Revision: 1.5 $'              =~ /^.Revision: (.*) \$/; our $REVISION   = $1;
'$Date: 2009/04/29 22:11:05 $'  =~ /^.Date: (.*) \$/;     our $CHECKED_IN = $1;
'$Author: scouras $'            =~ /^.Author: (.*) \$/;   our $AUTHOR     = $1;


############################################## DEFAULT CONFIGURATION

our %CONFIG_ANAL = (

  revision      => $REVISION,
  checked_in    => $CHECKED_IN,
  author        => $AUTHOR,

  subtype        => '',
  resolution     => 10,
  
  dir_anal       => 'periodic',
  file_data      => 'periodic.dat',
  overwrite_anal => 0,
  overwrite_plots=> 0,
  width          => 1024,
  height         => 768,
  threads        => 2,
 
  is_plotted     => 1,
  plot_resolution=> 10,
  wait_to_finish => 1,
  queue          => 'analysis',
  #queue          => 'analysis',
  plot_command   => "/users/scouras/code/scouras/plot_periodic",

);




######################################################### INITIALIZE

sub New {
  return bless {
    name => 'PERIODIC',
    %CONFIG_ANAL,
  };
}

sub Initialize {
  my $CONFIG_ANAL = $_[0];
  
  my %CONFIG_GLOBAL = $_[1] ? %{$_[1]} : ();
  my $ANAL = { 
    %$CONFIG_ANAL, 
    %CONFIG_GLOBAL,
  };
  
  $ANAL->{'title'} = 'PERIODIC';
  if ( $ANAL->{'subtype'} ) { 
    $ANAL->{'title'} .= " $ANAL->{'subtype'}";
  }

  $ANAL->{'plot_resolution'} |= $ANAL->{'resolution'};

  return bless $ANAL;
}




########################################################### GET JOBS

sub Get_Jobs {

  my $ANAL    = $_[0];
  my $ILMM    = $_[1];
  my $REGION  = $_[2];

  # PERIODIC only executes on whole molecules
  if ( not defined $REGION->{'molecule'} ) { return }
  if ( not defined $REGION->{'index'   } ) { return }
  if ( $REGION->{'period'}               ) { return }


  # SET UP JOB
  my $job = Lyse::Job::new ( $ANAL, $ILMM, $REGION, $ANAL->{'title'} );
  $job->{'resolution' } = $ANAL->{'resolution'};
  $job->{'line'       } = "periodic";
  $job->{'dir_anal'  } = "$job->{'dir_anal'}/$REGION->{'index'}_$REGION->{'name'}";
  $job->{'path_anal' } = "$ILMM->{'dir'}/$job->{'dir_anal'}";
  $job->Add_Image($ANAL->{'title'}, $ANAL->{'file_data'});
  $job->Validate_Initial();

  if ( wantarray ) { return ($job) }
  else             { return [$job] }
}



###################################################### VALIDATE JOBS
sub Validate_Job {

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $dir = $job->{'path_anal'};
  my $ILMM = $job->{'ilmm'};

  # Verify that dir and data files exist
  if ( $ANAL->{'overwrite_anal'}  ) { return (0, "forced overwrite" ) }
  my ($valid, $message);
  ($valid, $message) = 
    Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data'});
  return ($valid, $message) if not $valid;
  $job->{'status'}{'existing'} = 1;
  ($valid, $message) = 
    Lyse::Job::Basic_Data_Time_Check( $job->{'path_data'}, 
                                $ILMM->{'start_time'},
                                $ILMM->{'finish_time'},
                                $ANAL->{'resolution'},
                                $ANAL->{'leniency'},
                                $ILMM->{'rewind'},
                               );
  return ($valid, $message) if not $valid;

  $job->{'status'}{'valid'} = 1;
  return 1;
}




###################################################### VALIDATE PLOT

sub Validate_Plot { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $path_data = $job->{'path_data'};
  my $path_image = $job->{'path_image'};
  #print "Validating $path_image\n";
  if ( not -e $path_image             ) { return ( 0, "missing plot"            ) }
  if ( -z $path_image                 ) { return ( 0, "plot is empty "          ) }
  if ( $ANAL->{'overwrite_plots'}     ) { return ( 0, "forced overwrite"        ) }
  if ( -M $path_image > -M $path_data ) { return ( 0, "plot is older than data" ) }
  $job->{'images'} = [$job->{'path_image'}];

  return 1;
}


########################################################### PLOT JOB

sub Plot_Job { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $plot_command = 
        "$ANAL->{'plot_command'} "
          . "$job->{'path_data'} "
          . "ps=$ANAL->{'plot_resolution'} "
          . "title=\"$job->{'title_image'}\" "
          . "height=$ANAL->{'height'} "
          . "width=$ANAL->{'width'} "
          . "&> $job->{'path_anal'}/$job->{'region'}{'file_name'}.log"
          ;

  #print "$plot_command\n";
  my $result = system ( $plot_command );
  if ( $result ) { 
    $job->{'status'}{'error'} = "plot_dssp failed";
    return 0;
  } else {
    my ( $status, $message ) = $ANAL->Validate_Plot($job);
    if ( $status ) { $job->{'status'}{'plotted'} = 1; }
    return $status, $message;
  }

}






1

