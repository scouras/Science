#!/usr/bin/perl

package Lyse::RMSD;

use strict;
use warnings;
use Utility qw(:all);
use Data::Dumper;
use Ilmm;
use POSIX;

# Not actually exporting anything
require Exporter;
our @ISA = qw(Exporter);
our %EXPORT_TAGS = ('all' => [qw()]);
our @EXPORT_OK = (@{$EXPORT_TAGS{'all'}});
our @EXPORT = qw();

# CVS VERSION INFORMATION (AUTOMAGICALLY GENERATED BY CVS)
'$Revision: 1.4 $'          =~ /^.Revision: (.*) \$/; our $REVISION   = $1;
'$Date: 2009/04/29 22:11:01 $'  =~ /^.Date: (.*) \$/;     our $CHECKED_IN = $1;
'$Author: scouras $'            =~ /^.Author: (.*) \$/;   our $AUTHOR     = $1;


############################################## DEFAULT CONFIGURATION

our %CONFIG_ANAL = (

  revision          => $REVISION,
  checked_in        => $CHECKED_IN,
  author            => $AUTHOR,

  subtype           => '',
  selection_basic   => '@CA',
  selection_matrix  => '@CA',

  dir_anal          => 'rmsd',
  resolution_basic  =>    1,
  resolution_matrix =>  100,
  resolution_rmsd   =>    1,
  window_size_rmsf_t=>  500,

  overwrite_anal    =>    0,
  overwrite_plots   =>    0,
  start_emphasis    =>   20,
  final_emphasis    =>   20,
  width             => 1024,
  height            =>  768,
  
  #queue             => 'analysis',
  is_plotted        => 1,
  wait_to_finish    => 1,
  queue             => 'analysis',
  plot_rmsd         => "/users/scouras/code/scouras/plot_rmsd",
  plot_rmsf         => "/users/scouras/code/scouras/plot_rmsf",
  plot_rmsf_t       => "/users/scouras/code/scouras/plot_rmsf_t",
  plot_rmsd_matrix  => "/users/scouras/code/scouras/plot_rmsd_matrix",

);




######################################################### INITIALIZE

sub New {
  return bless {
    name => 'RMSD',
    %CONFIG_ANAL,
  };
}

sub Initialize {
  my $CONFIG_ANAL = $_[0];
  
  my %CONFIG_GLOBAL = $_[1] ? %{$_[1]} : ();
  my $ANAL = { 
    %$CONFIG_ANAL, 
    %CONFIG_GLOBAL,
  };

  for my $type ( "rmsd", "rmsf", "rmsf t", "rmsd matrix", "rmsd basic" ) { 
    my $clean = lc Utility::Clean_Filename ( $type );
    $ANAL->{"title_$clean"} = uc $type;
    if ( $ANAL->{'subtype'} ) { $ANAL->{"title_$clean"} .= " $ANAL->{'subtype'}" }
  }

  $ANAL->{'title'} = $CONFIG_ANAL->{'name'};
  if ( $ANAL->{'subtype'} ) { 
    $ANAL->{'title'} .= " $ANAL->{'subtype'}";
  }

  return bless $ANAL;
}



########################################################### GET JOBS

sub Get_Jobs {

  my $ANAL = $_[0];
  my $ILMM = $_[1];
  my $REGION = $_[2];

  # RMSD Parameters
  my $reference = $ANAL->{'reference'};
  my $select_basic;
  my $select_matrix;
  if ( $REGION->{'system'} ) { 
    $select_basic  = "$ANAL->{'selection_basic'}";
    $select_matrix = "$ANAL->{'selection_matrix'}";
  } elsif ( $REGION->{'molecule'} ) { 
    $select_basic  = "$REGION->{'index'}:$ANAL->{'selection_basic'}"; 
    $select_matrix = "$REGION->{'index'}:$ANAL->{'selection_matrix'}"; 
  } elsif ( $REGION->{'selection_rmsd'} ) { 
    $select_basic  = $REGION->{'selection_rmsd'};
    $select_matrix = $REGION->{'selection_rmsd'};
  } else { 
    $select_basic  = "$REGION->{'selection'}$ANAL->{'selection_basic'}";
    $select_matrix = "$REGION->{'selection'}$ANAL->{'selection_matrix'}";
  }


  # Matrix Analysis
  my $job_matrix = Lyse::Job::new ( $ANAL, $ILMM, $REGION, $ANAL->{"title_rmsd_matrix"}, 1 );
  $job_matrix->{'matrix'    } = 1;
  $job_matrix->{'resolution'} = $ANAL->{'resolution_matrix'};
  $job_matrix->{'line'      } = "rmsd $select_basic $reference matrix";
  $job_matrix->{'extra'     } = ["set rmsd_window_size_min $ANAL->{'window_size_rmsf_t'}"];
  $job_matrix->Add_Image("$ANAL->{'title_rmsd_matrix'} - $REGION->{'title_full'}", 'matrix.dat', 'matrix');

  # Basic Analysis
  my $job_basic = Lyse::Job::new ( $ANAL, $ILMM, $REGION, $ANAL->{'title_rmsd_basic'}, 1 );
  $job_basic->{'basic'      } = 1;
  $job_basic->{'resolution' } = $ANAL->{'resolution_basic'};
  $job_basic->{'line'       } = "rmsd $select_matrix $reference nomatrix";
  $job_basic->{'extra'      } = ["set rmsd_window_size_min 500"];
  $job_basic->{'dependency' } = $job_matrix;
  $job_basic->Add_Image("$ANAL->{'title_rmsd'  } - $REGION->{'title_full'}", "rmsd.dat",   "rmsd");
  $job_basic->Add_Image("$ANAL->{'title_rmsf'  } - $REGION->{'title_full'}", "rmsf.dat",   "rmsf");
  $job_basic->Add_Image("$ANAL->{'title_rmsf_t'} - $REGION->{'title_full'}", "rmsf_t.dat", "rmsf_t");

  $job_matrix->Validate_Initial();
  $job_basic ->Validate_Initial();
 
  # If matrix isn't valid, basic needs to be rerun after it
  # because matrix rewrites basic's data.
  if ( not $job_matrix->{'status'}{'valid'} 
       and $job_basic->{'status'}{'valid'} ) { 
    $job_basic->{'status'}{'valid'} = 0;
    $job_basic->{'status'}{'initial'} = "rerunning matrix"; 
  }

  #use Data::Dumper;
  #$Data::Dumper::Maxdepth=1;
  #die Dumper($job_matrix);

  return ($job_matrix, $job_basic);
}


###################################################### VALIDATE JOBS

sub Validate_Job { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  my $dir = $job->{'path_anal'};
  my $ILMM = $job->{'ilmm'};

  #print "OVERWRITE ANAL = $ANAL->{'overwrite_anal'}\n";
  if ( $ANAL->{'overwrite_anal'} ) { return (0, "forced_overwrite") }

  my $leniency = $ANAL->{'leniency'} || 1000;
  my ( $start_time, $finish_time );
  if ( $job->{'period'} ) { 
    $start_time = $job->{'period'}[0];
    $finish_time = $job->{'period'}[1];
  } else { 
    $start_time = $ILMM->{'start_time'};
    $finish_time = $ILMM->{'finish_time'};
  }

  # Matrix type jobs
  my ($valid, $message);
  if ( $job->{'matrix'} ) { 

    # Data File Existence
    ($valid, $message) = Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data_matrix'});
    return ($valid, $message) if not $valid;
    $job->{'status'}{'existing'} = 1;

    # Correct Number of Datapoints

    my $total_time  = $finish_time - $start_time;

    #my $timepoints = POSIX::floor( $ILMM->{'total_structs'} / $ANAL->{'resolution_matrix'});
    my $timepoints = POSIX::floor( $total_time / $ANAL->{'resolution_matrix'});
    my $leniency_matrix = POSIX::floor( $leniency / $ANAL->{'resolution_matrix'});
    my $min_height = $timepoints - $leniency_matrix;
    my $min_width = $min_height;
    my $max_height = $timepoints + $leniency_matrix;
    my $max_width = $max_height;

    my $height = (split / /, `wc -l $job->{'path_data_matrix'}`)[0];
    my $width  = (split / /, `head -1 $job->{'path_data_matrix'} | wc -w`)[0];
    chomp $height;
    chomp $width;
    if ( $height != $width ) 
      { return ( 0, "not a square matrix ($height x $width)" ) }
    if ( ( $height < $min_height ) or ( $width < $min_width ) ) 
      { return ( 0, "not enough timepoints ($height x $width)" ) }
    if ( ( ( $height > $max_height ) or ( $width > $max_width ) ) and $ANAL->{'rewind'} )
      { return ( 0, "too many timepoints ($height x $width)" ) }
    $job->{'status'}{'valid'} = 1;
  }

  # Basic type jobs
  elsif ( $job->{'basic'} ) { 

    # Data File Existence
    ($valid, $message) = Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data_rmsd'});
    return ($valid, $message) if not $valid;
    ($valid, $message) = Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data_rmsf'});
    return ($valid, $message) if not $valid;
    ($valid, $message) = Lyse::Job::Basic_Data_Check($job->{'path_anal'}, $job->{'path_data_rmsf_t'});
    return ($valid, $message) if not $valid;
    $job->{'status'}{'existing'} = 1;

    # Data File Contains All Timepoints
    ($valid, $message) = 
      Lyse::Job::Basic_Data_Time_Check ( 
                $job->{'path_data_rmsd'  }, 
                $start_time, 
                $finish_time, 
                $ANAL->{'resolution_rmsd'},
                $ANAL->{'leniency'},
                $ANAL->{'rewind'},
              );
    return ($valid, $message) if not $valid;
    $job->{'status'}{'valid'} = 1;
#    ($valid, $message) = 
#      Lyse::Job::Basic_Data_Time_Check ( $job->{'path_data_rmsf_t'}, $s, $f, $ANAL->{'window_size_rmsf_t'} );
#    return ($valid, $message) if not $valid;

  }
  
  return 1;

}


###################################################### VALIDATE PLOT

sub Validate_Plot { 

  my $ANAL = $_[0];
  my $job  = $_[1];

  if ( $ANAL->{'overwrite_plots'} ) { return ( 0, "forced overwrite" ) }
  
  my @subjobs = ();
  if ( $job->{'matrix'} ) { 
    push @subjobs, "matrix";
  } elsif ( $job->{'basic'} ) { 
    push @subjobs, "rmsd", "rmsf", "rmsf_t";
  }

  $job->{'images'} = [];
  $job->{'data_files'} = [];

  foreach my $subjob (@subjobs) { 
    my $data = $job->{"path_data_$subjob"};
    my $image = $job->{"path_image_$subjob"};
    if ( not -e $image        ) { return ( 0, "missing plot ($subjob)"            ) }
    if ( not -e $data         ) { return ( 0, "missing data ($subjob)"            ) }
    if ( -z $image            ) { return ( 0, "plot is empty ($subjob)"           ) }
    if ( -M $image > -M $data ) { return ( 0, "plot is older than data ($subjob)" ) }
    push @{$job->{'images'}}, $image;
    #push @{$job->{'data_files'}}, $data;
  }

  return 1;
}



########################################################### PLOT JOB

sub Plot_Job {

  my $ANAL = $_[0];
  my $job  = $_[1];
  my $region = $job->{'region'};
  my ( $start_time, $finish_time );
  if ( $job->{'period'} ) { 
    $start_time = $job->{'period'}[0] * 1000;
    $finish_time = $job->{'period'}[1] * 1000;
  } else { 
    $start_time = $job->{'ilmm'}{'start_time'};
    $finish_time = $job->{'ilmm'}{'finish_time'};
  }

  if ( $job->{'matrix'} ) { 
    my $plot_matrix = 
      "$ANAL->{'plot_rmsd_matrix'} "
        . "$job->{'path_data_matrix'} "
        . "ps=$ANAL->{'resolution_matrix'} "
        . "title=\"$job->{'title_image_matrix'}\" "
        . "height=$ANAL->{'height'} "
        . "width=$ANAL->{'width'} "
        . "start_time=$start_time "
        . "&> $job->{'path_anal'}/plot_rmsd_matrix.log"
        ;
    my $result = system ( $plot_matrix ) ;
    if ( $result ) { 
      $job->{'status'}{'error'} = "plot_rmsd_matrix failed"; 
      return 0;
    }
  
  
  } elsif ( $job->{'basic'} ) { 
    my $result;
    my $plot_rmsd = 
      "$ANAL->{'plot_rmsd'} "
        . "$job->{'path_data_rmsd'} "
        . "ps=$ANAL->{'resolution_rmsd'} "
        . "title=\"$job->{'title_image_rmsd'}\" "
        . "height=$ANAL->{'height'} "
        . "width=$ANAL->{'width'} "
        . "&> $job->{'path_anal'}/plot_rmsd.log"
        ; 
    $result = system ( $plot_rmsd ) ;
    if ( $result ) { 
      $job->{'status'}{'error'} = "plot_rmsd failed"; 
      return 0;
    }

    my $plot_rmsf = 
      "$ANAL->{'plot_rmsf'} "
        . "$job->{'path_data_rmsf'} "
        . "res=$region->{'start_residue'} "
        . "title=\"$job->{'title_image_rmsf'}\" "
        . "height=$ANAL->{'height'} "
        . "width=$ANAL->{'width'} "
        . "&> $job->{'path_anal'}/plot_rmsf.log"
        ;
    $result = system ( $plot_rmsf ) ;
    if ( $result ) { 
      $job->{'status'}{'error'} = "plot_rmsf failed"; 
      return 0;
    }

    my $plot_rmsf_t = 
      "$ANAL->{'plot_rmsf_t'} "
        . "$job->{'path_data_rmsf_t'} "
        . "res=$region->{'start_residue'} "
        . "title=\"$job->{'title_image_rmsf_t'}\" "
        . "height=$ANAL->{'height'} "
        . "width=$ANAL->{'width'} "
        . "&> $job->{'path_anal'}/plot_rmsf_t.log"
        ; 

    $result = system ( $plot_rmsf_t ) ;
    if ( $result ) { 
      $job->{'status'}{'error'} = "plot_rmsf_t failed"; 
      return 0;
    }

  }
  $job->{'status'}{'plotted'} = 1;
  return 1;
}


